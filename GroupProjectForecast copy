#!/usr/bin/env python

from dotenv import load_dotenv
import os
import requests

load_dotenv()
token = os.environ.get("api-token")

current_url = "http://api.weatherapi.com/v1/current.json"
forecast_url = "http://api.weatherapi.com/v1/forecast.json"

def main():

    while(True):
        print("\nHere are your options:\n")
        print("1: Get current weather")
        print("2: Get forecast weather")
        print("3: Get past weather")
        print("4: Exit the program")
        option = input("\nWhat do you want to do? ")

        if not option.isnumeric():
            print("\nYou have to enter an integer!\n")
            continue

        option = int(option)

        if option == 4:
            exit()

        city = input("\nEnter the name of a city: ")

        if option == 1:
            data = {
                'key': token,
                'q': city
            }
            api_call = requests.get(current_url, data)
            if api_call.status_code == 200:
                response = api_call.json()
                name = response['location']['name']
                region = response['location']['region']
                localtime = response['location']['localtime']
                temp_c = response['current']['temp_c']
                is_day = response['current']['is_day']
                condition_text = response['current']['condition']['text']

                print(f"\nCity: {name}, {region}")
                print(f"Localtime: {localtime}")
                print(f"Temperature in °C: {temp_c}")
                print(f"Is day: {bool(is_day)}")
                print(f"Condition: {condition_text}")

        if option == 2:
            forecast_days = input("Enter the number of days for forecast (1-10): ")
#The user is asked to enter the number of days they want the forecast for            
            data = {
                'key': token,
#Key is defined to be the API token                
                'q': city,
#q is defined to be the city that was entered by the user                
                'days': forecast_days
#days is defined to be the number of days the user wants the forecast for                
            }
            api_call = requests.get(forecast_url, params=data)
#the API call is made to the forecast API, the parameters are defined to be the ones specified as the data above            
            if api_call.status_code == 200:
#the success of the API call is checked (code 200=success)                
                response = api_call.json()
#the JSON response is converted to a format that can be interpreted and manipulated by python                
                forecast_data = response['forecast']['forecastday']
#the forecast information is set to be forecast_data                
                for day in forecast_data:
                    date = day['date']
                    max_temp = day['day']['maxtemp_c']
                    min_temp = day['day']['mintemp_c']
                    condition_text = day['day']['condition']['text']
#for each of the days the date, the maximum and minimum temperature and a short description of the weather is retrieved
                    print(f"\nDate: {date}")
                    print(f"Max temperature in °C: {max_temp}")
                    print(f"Min temperature in °C: {min_temp}")
                    print(f"Condition: {condition_text}")
            else:
                print("Failed to retrieve forecast data.")
#this information is then printed, if it fails to retrieve the data this is also stated
        if option == 3:
            data = {
                'key': token,
                'q': city
            }
            api_call = requests.get(current_url, data)
            print(api_call.json())

if __name__ == "__main__":
    main()
